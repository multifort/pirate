apiVersion: v1
kind: List
items: 
- apiVersion: v1
  kind: ConfigMap
  metadata:
    name: ${NAME}-config
    <% if(APPLICATION_NAME != null) { %>
    namespace: application-${APPLICATION_NAME}
    <% } else { %>
    namespace: application-store
    <% } %>
  data:
    ensemble: "${NAME}-0;${NAME}-1;${NAME}-2"
    jvm.heap: "2G"
    tick: "2000"
    init: "10"
    sync: "5"
    client.cnxns: "60"
    snap.retain: "3"
    purge.interval: "1"

- apiVersion: apps/v1beta1
  kind: StatefulSet
  metadata:
    name: ${NAME}
    <% if(APPLICATION_NAME != null) { %>
    namespace: application-${APPLICATION_NAME}
    <% } else { %>
    namespace: application-store
    <% } %>
  spec:
    serviceName: ${NAME}
    replicas: 3
    template:
      metadata:
        labels:
          name: ${NAME}
        annotations:
          pod.alpha.kubernetes.io/initialized: "true"
          scheduler.alpha.kubernetes.io/affinity: >
              {
                "podAntiAffinity": {
                  "requiredDuringSchedulingRequiredDuringExecution": [{
                    "labelSelector": {
                      "matchExpressions": [{
                        "key": "name",
                        "operator": "In",
                        "values": ["${NAME}-headless"]
                      }]
                    },
                    "topologyKey": "kubernetes.io/hostname"
                  }]
                }
              }
      spec:
        containers:
        - name: ${NAME}
          imagePullPolicy: IfNotPresent
          image: 139.219.239.226/library/k8szk-port:v1
          resources:
            limits:
              <% if (LIMITS_CPU != null) { %>
              cpu: ${LIMITS_CPU}
              <% } %>
              <% if (LIMITS_MEMORY != null) { %>
              memory: ${LIMITS_MEMORY}
              <% } %>
            requests:
              <% if (REQUESTS_CPU != null) { %>
              cpu: ${REQUESTS_CPU}
              <% } %>
              <% if (REQUESTS_MEMORY != null) { %>
              memory: ${REQUESTS_MEMORY}
              <% } %>
          ports:
          - containerPort: 2181
            name: client
          - containerPort: 2888
            name: server
          - containerPort: 3888
            name: leader-election
          env:
          - name : ZK_ENSEMBLE
            valueFrom:
              configMapKeyRef:
                name: ${NAME}-config
                key: ensemble
          - name : ZK_HEAP_SIZE
            valueFrom:
              configMapKeyRef:
                  name: ${NAME}-config
                  key: jvm.heap
          - name : ZK_TICK_TIME
            valueFrom:
              configMapKeyRef:
                  name: ${NAME}-config
                  key: tick
          - name : ZK_INIT_LIMIT
            valueFrom:
              configMapKeyRef:
                  name: ${NAME}-config
                  key: init
          - name : ZK_SYNC_LIMIT
            valueFrom:
              configMapKeyRef:
                  name: ${NAME}-config
                  key: tick
          - name : ZK_MAX_CLIENT_CNXNS
            valueFrom:
              configMapKeyRef:
                  name: ${NAME}-config
                  key: client.cnxns
          - name: ZK_SNAP_RETAIN_COUNT
            valueFrom:
              configMapKeyRef:
                  name: ${NAME}-config
                  key: snap.retain
          - name: ZK_PURGE_INTERVAL
            valueFrom:
              configMapKeyRef:
                  name: ${NAME}-config
                  key: purge.interval
          - name: ZK_CLIENT_PORT
            value: "2181"
          - name: ZK_SERVER_PORT
            value: "2888"
          - name: ZK_ELECTION_PORT
            value: "3888"
          command:
          - sh
          - -c
          - zkGenConfig.sh && zkServer.sh start-foreground
          readinessProbe:
            exec:
              command:
              - "zkOk.sh"
            initialDelaySeconds: 15
            timeoutSeconds: 5
          livenessProbe:
            exec:
              command:
              - "zkOk.sh"
            initialDelaySeconds: 15
            timeoutSeconds: 5

- apiVersion: v1
  kind: Service
  metadata:
    name: ${NAME}
    <% if(APPLICATION_NAME != null) { %>
    namespace: application-${APPLICATION_NAME}
    <% } else { %>
    namespace: application-store
    <% } %>
  spec:
    <% if(NODE_TYPE != null){ %>
    type: NodePort
    <% } %>
    ports:
      <% if(ports != null){ %> 
      <% for(port in ports){ %>
      - port: ${port.port}
        nodePort: ${port.nodePort}
        targetPort: ${port.targetPort}
        protocol: ${port.protocol}
        name: http-${port.targetPort}
      <% } %>
      <% } %>
      <% if(nodePorts != null){ %>   
      <% for(port in nodePorts){ %>
      - port: ${port.port}
        targetPort: ${port.targetPort}
        protocol: ${port.protocol}
        name: http-${port.targetPort}
      <% } %>
      <% } %>
      <% for(var i = 0; i < containerPorts.~size; i++){ %>
      - port: ${containerPorts[i].key}
        targetPort: ${containerPorts[i].key}
        protocol: ${containerPorts[i].value}
        name: http-${i}
      <% } %>
    selector:
      name: ${NAME}
    
{"parameters":
  [
    {
      "description": "组件名称",
      "displayName": "名称",
      "name": "NAME",
      "value": "",
      "select": "",
      "type": "String",
      "required": "true"
    },
    {
      "description": "资源配置",
      "displayName": "修改资源会重新启动所有该组件下的实例",
      "name": "RESOURCE",
      "value": "",
      "select": "",
      "type": "Resource",
      "required": "false"
    },
    {
      "description": "端口信息",
      "displayName": "端口信息",
      "name": "PORT",
      "value": "",
      "select": "",
      "type": "Ports",
      "required": "false"
    }
  ]}
